// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#pragma once

#include <stdbool.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
    // We also try to prevent mixing versions of shared uniffi header structs.
    // If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V4
    #ifndef UNIFFI_SHARED_HEADER_V4
        #error Combining helper code from multiple versions of uniffi is not supported
    #endif // ndef UNIFFI_SHARED_HEADER_V4
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V4
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️

typedef struct RustBuffer
{
    int32_t capacity;
    int32_t len;
    uint8_t *_Nullable data;
} RustBuffer;

typedef int32_t (*ForeignCallback)(uint64_t, int32_t, RustBuffer, RustBuffer *_Nonnull);

typedef struct ForeignBytes
{
    int32_t len;
    const uint8_t *_Nullable data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
    int8_t code;
    RustBuffer errorBuf;
} RustCallStatus;

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

void ffi_zcash_e53_ZcashRecipientAddress_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashRecipientAddress_decode(
      RustBuffer params,RustBuffer address,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashRecipientAddress_shielded(
      void*_Nonnull addr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashRecipientAddress_transparent(
      void*_Nonnull addr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashRecipientAddress_unified(
      void*_Nonnull addr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashRecipientAddress_encode(
      void*_Nonnull ptr,RustBuffer params,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashUnifiedAddress_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashUnifiedAddress_new(
      RustBuffer orchard,RustBuffer sapling,RustBuffer transparent,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashUnifiedAddress_decode(
      RustBuffer params,RustBuffer address,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashUnifiedAddress_orchard(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashUnifiedAddress_sapling(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashUnifiedAddress_transparent(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashUnifiedAddress_encode(
      void*_Nonnull ptr,RustBuffer params,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashUnifiedFullViewingKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashUnifiedFullViewingKey_new(
      RustBuffer transparent,RustBuffer sapling,RustBuffer orchard,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashUnifiedFullViewingKey_decode(
      RustBuffer params,RustBuffer encoded,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashUnifiedFullViewingKey_encode(
      void*_Nonnull ptr,RustBuffer params,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashUnifiedFullViewingKey_transparent(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashUnifiedFullViewingKey_sapling(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashUnifiedFullViewingKey_orchard(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashUnifiedFullViewingKey_address(
      void*_Nonnull ptr,void*_Nonnull j,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashUnifiedFullViewingKey_find_address(
      void*_Nonnull ptr,void*_Nonnull j,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashUnifiedFullViewingKey_default_address(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashUnifiedSpendingKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashUnifiedSpendingKey_from_seed(
      RustBuffer params,RustBuffer seed,RustBuffer account_id,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashUnifiedSpendingKey_from_bytes(
      RustBuffer era,RustBuffer encoded,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashUnifiedSpendingKey_to_unified_full_viewing_key(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashUnifiedSpendingKey_transparent(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashUnifiedSpendingKey_sapling(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashUnifiedSpendingKey_orchard(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashUnifiedSpendingKey_to_bytes(
      void*_Nonnull ptr,RustBuffer era,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardNote_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardNote_from_parts(
      void*_Nonnull recipient,void*_Nonnull value,void*_Nonnull rho,void*_Nonnull rseed,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardNote_recipient(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardNote_value(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardNote_commitment(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardNullifier_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardNullifier_from_bytes(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardNullifier_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardRandomSeed_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardRandomSeed_from_bytes(
      RustBuffer data,void*_Nonnull rho,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardRandomSeed_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardNoteCommitment_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardNoteCommitment_to_extracted_note_commitment(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashExtractedNoteCommitment_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtractedNoteCommitment_from_bytes(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashExtractedNoteCommitment_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardAddress_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardAddress_from_raw_address_bytes(
      RustBuffer bytes,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardAddress_diversifier(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardAddress_to_raw_address_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashVerifyingKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashVerifyingKey_new(
      
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashProvingKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashProvingKey_new(
      
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardBundle_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardBundle_actions(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardBundle_flags(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardBundle_value_balance(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardBundle_anchor(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void zcash_e53_ZcashOrchardBundle_verify_proof(
      void*_Nonnull ptr,void*_Nonnull key,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardBundle_decrypt_output_with_key(
      void*_Nonnull ptr,uint64_t action_idx,void*_Nonnull ivk,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardBundle_decrypt_output_with_keys(
      void*_Nonnull ptr,RustBuffer ivks,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardBundle_recover_output_with_ovk(
      void*_Nonnull ptr,uint64_t action_idx,void*_Nonnull ovk,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardBundle_recover_outputs_with_ovks(
      void*_Nonnull ptr,RustBuffer ovks,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardFlags_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardFlags_from_parts(
      int8_t spends_enabled,int8_t outputs_enabled,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardFlags_from_byte(
      uint8_t v,
    RustCallStatus *_Nonnull out_status
    );
int8_t zcash_e53_ZcashOrchardFlags_spends_enabled(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
int8_t zcash_e53_ZcashOrchardFlags_outputs_enabled(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
uint8_t zcash_e53_ZcashOrchardFlags_to_byte(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardNoteValue_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardNoteValue_from_raw(
      uint64_t value,
    RustCallStatus *_Nonnull out_status
    );
uint64_t zcash_e53_ZcashOrchardNoteValue_value(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardValueCommitment_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardValueCommitment_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardAction_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardAction_nullifier(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardAction_cmx(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardAction_encrypted_note(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardAction_cv_net(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardFullViewingKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardFullViewingKey_from_bytes(
      RustBuffer bytes,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardFullViewingKey_address_at(
      void*_Nonnull ptr,void*_Nonnull j,RustBuffer scope,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardFullViewingKey_address(
      void*_Nonnull ptr,void*_Nonnull d,RustBuffer scope,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardFullViewingKey_scope_for_address(
      void*_Nonnull ptr,void*_Nonnull address,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardFullViewingKey_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardFullViewingKey_to_ivk(
      void*_Nonnull ptr,RustBuffer scope,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardFullViewingKey_to_ovk(
      void*_Nonnull ptr,RustBuffer scope,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardSpendingKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardSpendingKey_from_bytes(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardSpendingKey_from_zip32_seed(
      RustBuffer seed,uint32_t coin_type,uint32_t account,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardSpendingKey_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardSpendingKey_to_fvk(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashAnchor_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashAnchor_from_bytes(
      RustBuffer bytes,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashAnchor_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardIncomingViewingKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardIncomingViewingKey_from_bytes(
      RustBuffer bytes,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardIncomingViewingKey_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardIncomingViewingKey_diversifier_index(
      void*_Nonnull ptr,void*_Nonnull addr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardIncomingViewingKey_address_at(
      void*_Nonnull ptr,void*_Nonnull j,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardIncomingViewingKey_address(
      void*_Nonnull ptr,void*_Nonnull diversifier,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardDiversifier_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardDiversifier_from_bytes(
      RustBuffer bytes,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardDiversifier_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardOutgoingViewingKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardOutgoingViewingKey_from_bytes(
      RustBuffer bytes,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardOutgoingViewingKey_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardMerklePath_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardMerklePath_from_parts(
      uint32_t position,RustBuffer auth_path,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardMerklePath_root(
      void*_Nonnull ptr,void*_Nonnull cmx,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardMerkleHash_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardMerkleHash_from_bytes(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardMerkleHash_from_cmx(
      void*_Nonnull cmx,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardMerkleHash_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardDiversifierIndex_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardDiversifierIndex_from_bytes(
      RustBuffer b,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardDiversifierIndex_from_u32(
      uint32_t i,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardDiversifierIndex_from_u64(
      uint64_t i,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOrchardDiversifierIndex_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashExtendedPrivKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedPrivKey_random(
      
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedPrivKey_from_bytes(
      RustBuffer bytes,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedPrivKey_random_with_seed_size(
      RustBuffer seed_size,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedPrivKey_with_seed(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashExtendedPrivKey_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedPrivKey_derive_private_key(
      void*_Nonnull ptr,void*_Nonnull key_index,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashKeyIndex_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashKeyIndex_from_u32(
      uint32_t i,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashKeyIndex_hardened_from_normalize_index(
      uint32_t i,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashKeyIndex_from_index(
      uint32_t i,
    RustCallStatus *_Nonnull out_status
    );
uint32_t zcash_e53_ZcashKeyIndex_raw_index(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
uint32_t zcash_e53_ZcashKeyIndex_normalize_index(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
int8_t zcash_e53_ZcashKeyIndex_is_valid(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashZip317FeeRule_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashZip317FeeRule_standard(
      
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashZip317FeeRule_non_standard(
      void*_Nonnull marginal_fee,uint64_t grace_actions,uint64_t p2pkh_standard_input_size,uint64_t p2pkh_standard_output_size,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashZip317FeeRule_marginal_fee(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashFixedFeeRule_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashFixedFeeRule_non_standard(
      void*_Nonnull fixed_fee,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashFixedFeeRule_standard(
      
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashFixedFeeRule_fixed_fee(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashTransparentBundle_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
int8_t zcash_e53_ZcashTransparentBundle_is_coinbase(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashTransparentBundle_vin(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashTransparentBundle_vout(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashTxOut_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashTxOut_new(
      void*_Nonnull value,void*_Nonnull script_pubkey,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashTxOut_value(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashTxOut_script_pubkey(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashTxOut_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashTxOut_recipient_address(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashTxIn_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashTxIn_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashTransactionBuilder_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashTransactionBuilder_new(
      RustBuffer parameters,void*_Nonnull block_height,
    RustCallStatus *_Nonnull out_status
    );
void zcash_e53_ZcashTransactionBuilder_add_sapling_spend(
      void*_Nonnull ptr,void*_Nonnull extsk,void*_Nonnull diversifier,void*_Nonnull note,void*_Nonnull merkle_path,
    RustCallStatus *_Nonnull out_status
    );
void zcash_e53_ZcashTransactionBuilder_add_sapling_output(
      void*_Nonnull ptr,RustBuffer ovk,void*_Nonnull to,void*_Nonnull value,void*_Nonnull memo,
    RustCallStatus *_Nonnull out_status
    );
void zcash_e53_ZcashTransactionBuilder_add_transparent_input(
      void*_Nonnull ptr,void*_Nonnull sk,void*_Nonnull utxo,void*_Nonnull coin,
    RustCallStatus *_Nonnull out_status
    );
void zcash_e53_ZcashTransactionBuilder_add_transparent_output(
      void*_Nonnull ptr,void*_Nonnull to,void*_Nonnull value,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashTransactionBuilder_build(
      void*_Nonnull ptr,void*_Nonnull prover,RustBuffer fee_rule,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashTransaction_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashTransaction_from_bytes(
      RustBuffer data,RustBuffer consensus_branch_id,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashTransaction_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashTransaction_txid(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashTransaction_version(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashTransaction_consensus_branch_id(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
uint32_t zcash_e53_ZcashTransaction_lock_time(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashTransaction_expiry_height(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashTransaction_transparent_bundle(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashTransaction_sapling_bundle(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashTransaction_orchard_bundle(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashTxId_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashTxId_from_bytes(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashTxId_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOrchardTransactionBuilder_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardTransactionBuilder_new(
      RustBuffer parameters,void*_Nonnull target_height,void*_Nonnull expiry_height,void*_Nonnull anchor,void*_Nonnull flags,
    RustCallStatus *_Nonnull out_status
    );
void zcash_e53_ZcashOrchardTransactionBuilder_add_spend(
      void*_Nonnull ptr,void*_Nonnull fvk,void*_Nonnull note,void*_Nonnull merkle_path,
    RustCallStatus *_Nonnull out_status
    );
void zcash_e53_ZcashOrchardTransactionBuilder_add_recipient(
      void*_Nonnull ptr,RustBuffer ovk,void*_Nonnull recipient,uint64_t value,RustBuffer memo,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOrchardTransactionBuilder_build(
      void*_Nonnull ptr,RustBuffer keys,RustBuffer sighash,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashTxVersion_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashTxVersion_from_bytes(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashTxVersion_suggested_for_branch(
      RustBuffer consensus_branch_id,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashTxVersion_selection(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
uint32_t zcash_e53_ZcashTxVersion_header(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
uint32_t zcash_e53_ZcashTxVersion_version_group_id(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashTxVersion_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
int8_t zcash_e53_ZcashTxVersion_has_sprout(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
int8_t zcash_e53_ZcashTxVersion_has_overwinter(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
int8_t zcash_e53_ZcashTxVersion_has_sapling(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
int8_t zcash_e53_ZcashTxVersion_has_orchard(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOutPoint_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOutPoint_new(
      RustBuffer hash,uint32_t n,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashAmount_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashAmount_new(
      int64_t amount,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashAmount_zero(
      
    RustCallStatus *_Nonnull out_status
    );
int64_t zcash_e53_ZcashAmount_value(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashSaplingSpendDescription_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashSaplingSpendDescription_cv(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashSaplingSpendDescription_anchor(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashSaplingSpendDescription_nullifier(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashSaplingSpendDescription_rk(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashSaplingBundle_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashSaplingBundle_shielded_spends(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashSaplingBundle_shielded_outputs(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashSaplingBundle_value_balance(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashSaplingOutputDescription_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashSaplingOutputDescription_cv(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashSaplingOutputDescription_cmu(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashSaplingMetadata_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashSaplingMetadata_new(
      
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashSaplingMetadata_spend_index(
      void*_Nonnull ptr,uint64_t n,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashSaplingMetadata_output_index(
      void*_Nonnull ptr,uint64_t n,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashBlockHeight_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashBlockHeight_new(
      uint32_t v,
    RustCallStatus *_Nonnull out_status
    );
uint32_t zcash_e53_ZcashBlockHeight_value(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashCommitmentTree_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashCommitmentTree_empty(
      
    RustCallStatus *_Nonnull out_status
    );
void zcash_e53_ZcashCommitmentTree_append(
      void*_Nonnull ptr,void*_Nonnull node,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashSaplingMerklePath_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashSaplingMerklePath_auth_path(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
uint64_t zcash_e53_ZcashSaplingMerklePath_position(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashIncrementalWitness_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashIncrementalWitness_from_tree(
      void*_Nonnull tree,
    RustCallStatus *_Nonnull out_status
    );
void zcash_e53_ZcashIncrementalWitness_append(
      void*_Nonnull ptr,void*_Nonnull node,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashIncrementalWitness_path(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashTransparentAddress_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashTransparentAddress_from_public_key(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashTransparentAddress_from_script(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashTransparentAddress_decode(
      RustBuffer params,RustBuffer input,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashTransparentAddress_encode(
      void*_Nonnull ptr,RustBuffer params,
    RustCallStatus *_Nonnull out_status
    );
int8_t zcash_e53_ZcashTransparentAddress_is_public_key(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
int8_t zcash_e53_ZcashTransparentAddress_is_script(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashTransparentAddress_script(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashTransparentAddress_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashExternalIvk_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExternalIvk_from_bytes(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExternalIvk_derive_address(
      void*_Nonnull ptr,uint32_t child_index,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashExternalIvk_default_address(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashExternalIvk_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashInternalIvk_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashInternalIvk_from_bytes(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashInternalIvk_default_address(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashInternalIvk_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashExternalOvk_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashExternalOvk_as_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashInternalOvk_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashInternalOvk_as_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashAccountPubKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashAccountPubKey_new(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashAccountPubKey_derive_external_ivk(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashAccountPubKey_derive_internal_ivk(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashAccountPubKey_ovks_for_shielding(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashAccountPubKey_internal_ovk(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashAccountPubKey_external_ovk(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashAccountPubKey_serialize(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashAccountPrivKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashAccountPrivKey_from_seed(
      RustBuffer params,RustBuffer seed,RustBuffer account_id,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashAccountPrivKey_from_bytes(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashAccountPrivKey_from_extended_privkey(
      void*_Nonnull key,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashAccountPrivKey_to_account_pubkey(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashAccountPrivKey_derive_external_secret_key(
      void*_Nonnull ptr,uint32_t child_index,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashAccountPrivKey_derive_internal_secret_key(
      void*_Nonnull ptr,uint32_t child_index,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashAccountPrivKey_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashScript_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashScript_from_bytes(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashScript_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashSaplingValueCommitment_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashSaplingValueCommitment_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashSaplingNote_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashSaplingNote_from_parts(
      void*_Nonnull recipient,void*_Nonnull value,RustBuffer rseed,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashSaplingNote_value(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashSaplingNote_cmu(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashSaplingNoteValue_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashSaplingNoteValue_from_raw(
      uint64_t data,
    RustCallStatus *_Nonnull out_status
    );
uint64_t zcash_e53_ZcashSaplingNoteValue_inner(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashSaplingNullifier_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashSaplingNullifier_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashSaplingExtractedNoteCommitment_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashSaplingExtractedNoteCommitment_new(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashSaplingExtractedNoteCommitment_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashPaymentAddress_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashPaymentAddress_from_bytes(
      RustBuffer bytes,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashPaymentAddress_decode(
      RustBuffer params,RustBuffer input,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashPaymentAddress_encode(
      void*_Nonnull ptr,RustBuffer params,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashPaymentAddress_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashPaymentAddress_diversifier(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashPaymentAddress_pk_d(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashPaymentAddress_create_note(
      void*_Nonnull ptr,uint64_t value,RustBuffer rseed,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashSaplingIvk_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashSaplingIvk_to_payment_address(
      void*_Nonnull ptr,void*_Nonnull diversifier,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashSaplingIvk_to_repr(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashDiversifier_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashDiversifier_new(
      RustBuffer bytes,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashDiversifier_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashFullViewingKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashFullViewingKey_from_bytes(
      RustBuffer bytes,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashFullViewingKey_from_expanded_spending_key(
      void*_Nonnull expsk,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashFullViewingKey_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashFullViewingKey_vk(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashFullViewingKey_ovk(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashNullifierDerivingKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashNullifierDerivingKey_from_bytes(
      RustBuffer bytes,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashNullifierDerivingKey_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashOutgoingViewingKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashOutgoingViewingKey_from_bytes(
      RustBuffer b,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashOutgoingViewingKey_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashExpandedSpendingKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExpandedSpendingKey_from_spending_key(
      RustBuffer sk,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExpandedSpendingKey_from_bytes(
      RustBuffer b,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExpandedSpendingKey_proof_generation_key(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashExpandedSpendingKey_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashProofGenerationKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashProofGenerationKey_to_viewing_key(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashDiversifiableFullViewingKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashDiversifiableFullViewingKey_from_bytes(
      RustBuffer bytes,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashDiversifiableFullViewingKey_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashDiversifiableFullViewingKey_fvk(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashDiversifiableFullViewingKey_to_nk(
      void*_Nonnull ptr,RustBuffer scope,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashDiversifiableFullViewingKey_to_ivk(
      void*_Nonnull ptr,RustBuffer scope,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashDiversifiableFullViewingKey_to_ovk(
      void*_Nonnull ptr,RustBuffer scope,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashDiversifiableFullViewingKey_address(
      void*_Nonnull ptr,void*_Nonnull j,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashDiversifiableFullViewingKey_find_address(
      void*_Nonnull ptr,void*_Nonnull j,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashDiversifiableFullViewingKey_default_address(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashDiversifiableFullViewingKey_diversified_address(
      void*_Nonnull ptr,void*_Nonnull diversifier,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashDiversifiableFullViewingKey_change_address(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashDiversifiableFullViewingKey_diversified_change_address(
      void*_Nonnull ptr,void*_Nonnull diversifier,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashDiversifiableFullViewingKey_decrypt_diversifier(
      void*_Nonnull ptr,void*_Nonnull addr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashSaplingDiversifiedTransmissionKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashViewingKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashViewingKey_ivk(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashViewingKey_to_payment_address(
      void*_Nonnull ptr,void*_Nonnull diversifier,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashExtendedFullViewingKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedFullViewingKey_from_bytes(
      RustBuffer bytes,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedFullViewingKey_decode(
      RustBuffer params,RustBuffer input,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashExtendedFullViewingKey_encode(
      void*_Nonnull ptr,RustBuffer params,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashExtendedFullViewingKey_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashExtendedFullViewingKey_address(
      void*_Nonnull ptr,void*_Nonnull j,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedFullViewingKey_derive_child(
      void*_Nonnull ptr,RustBuffer i,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashExtendedFullViewingKey_find_address(
      void*_Nonnull ptr,void*_Nonnull j,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashExtendedFullViewingKey_default_address(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedFullViewingKey_derive_internal(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedFullViewingKey_to_diversifiable_full_viewing_key(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashSaplingPublicKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashSaplingPublicKey_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashSaplingNode_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashSaplingNode_from_cmu(
      void*_Nonnull cmu,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashExtendedSpendingKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedSpendingKey_master(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedSpendingKey_from_bytes(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedSpendingKey_from_path(
      void*_Nonnull master,RustBuffer path,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedSpendingKey_decode(
      RustBuffer params,RustBuffer input,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashExtendedSpendingKey_encode(
      void*_Nonnull ptr,RustBuffer params,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashExtendedSpendingKey_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedSpendingKey_derive_child(
      void*_Nonnull ptr,RustBuffer index,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashExtendedSpendingKey_default_address(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedSpendingKey_derive_internal(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashExtendedSpendingKey_to_diversifiable_full_viewing_key(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashDiversifierIndex_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashDiversifierIndex_new(
      
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashDiversifierIndex_from_u32(
      uint32_t i,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashDiversifierIndex_from_u64(
      uint64_t i,
    RustCallStatus *_Nonnull out_status
    );
void zcash_e53_ZcashDiversifierIndex_increment(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
uint32_t zcash_e53_ZcashDiversifierIndex_to_u32(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashDiversifierIndex_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashMemoBytes_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashMemoBytes_new(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashMemoBytes_empty(
      
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashMemoBytes_data(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashLocalTxProver_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashLocalTxProver_new(
      RustBuffer spend_path,RustBuffer output_path,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashLocalTxProver_from_bytes(
      RustBuffer spend_param_bytes,RustBuffer output_param_bytes,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashLocalTxProver_with_default_location(
      
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_SecpSecretKey_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_SecpSecretKey_new(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_SecpSecretKey_serialize_secret(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_ZcashJubjubFr_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_ZcashJubjubFr_from_bytes(
      RustBuffer data,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_ZcashJubjubFr_to_bytes(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_TestSupport_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_TestSupport_from_csv_file(
      
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_TestSupport_get_as_u8_array(
      void*_Nonnull ptr,RustBuffer key,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_TestSupport_get_as_u32_array(
      void*_Nonnull ptr,RustBuffer key,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_TestSupport_get_as_u64_array(
      void*_Nonnull ptr,RustBuffer key,
    RustCallStatus *_Nonnull out_status
    );
uint32_t zcash_e53_TestSupport_get_as_u32(
      void*_Nonnull ptr,RustBuffer key,
    RustCallStatus *_Nonnull out_status
    );
uint64_t zcash_e53_TestSupport_get_as_u64(
      void*_Nonnull ptr,RustBuffer key,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_TestSupport_get_as_string(
      void*_Nonnull ptr,RustBuffer key,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_decode_extended_full_viewing_key(
      RustBuffer hrp,RustBuffer s,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_decode_extended_spending_key(
      RustBuffer hrp,RustBuffer s,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_decode_payment_address(
      RustBuffer hrp,RustBuffer s,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull zcash_e53_decode_transparent_address(
      RustBuffer pubkey_version,RustBuffer script_version,RustBuffer s,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_encode_extended_full_viewing_key(
      RustBuffer hrp,void*_Nonnull extfvk,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_encode_extended_spending_key(
      RustBuffer hrp,void*_Nonnull extsk,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_encode_payment_address(
      RustBuffer hrp,void*_Nonnull addr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_encode_payment_address_p(
      RustBuffer params,void*_Nonnull addr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_encode_transparent_address(
      RustBuffer pubkey_version,RustBuffer script_version,void*_Nonnull addr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer zcash_e53_encode_transparent_address_p(
      RustBuffer params,void*_Nonnull addr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer ffi_zcash_e53_rustbuffer_alloc(
      int32_t size,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer ffi_zcash_e53_rustbuffer_from_bytes(
      ForeignBytes bytes,
    RustCallStatus *_Nonnull out_status
    );
void ffi_zcash_e53_rustbuffer_free(
      RustBuffer buf,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer ffi_zcash_e53_rustbuffer_reserve(
      RustBuffer buf,int32_t additional,
    RustCallStatus *_Nonnull out_status
    );
